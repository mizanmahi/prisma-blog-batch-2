// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// role
enum UserRole {
  SUPER_ADMIN
  ADMIN
  BLOGGER
  MODERATOR
}

// user status
enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

// enums
enum Visibility {
  PUBLIC
  PRIVATE
}

// gender
enum Gender {
  MALE
  FEMALE
}

model User {
  id                     String     @id @default(uuid())
  email                  String     @unique
  password               String
  role                   UserRole
  passwordChangeRequired Boolean    @default(true)
  status                 UserStatus @default(ACTIVE)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  admin                  Admin?
  author                 Author?
  moderator              Moderator?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("admins")
}

model Author {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  gender        Gender
  isDeleted     Boolean  @default(false)
  bio           String? // Short biography or description of the author
  website       String? // Personal website URL
  twitter       String? // Twitter profile URL
  linkedIn      String? // LinkedIn profile URL
  facebook      String? // Facebook profile URL
  language      String? // Primary language of the author
  education     String? // Educational background
  experience    String? // Work experience or professional achievements
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user    User      @relation(fields: [email], references: [email])
  blog    Blog[]
  Comment Comment[]
}

model Moderator {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  gender        Gender
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("moderators")
}

model Blog {
  id         String     @id @default(uuid())
  title      String
  content    String
  authorId   String
  author     Author     @relation(fields: [authorId], references: [id])
  visibility Visibility @default(PUBLIC)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  comment    Comment[]

  @@map("blogs")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  author    Author   @relation(fields: [authorId], references: [id])
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}
